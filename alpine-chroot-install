#!/bin/sh
# vim: set ts=4:
#---
# Usage: alpine-chroot-install [options]
#
# This script installs Alpine Linux into a chroot and optionally sets up
# qemu-user and binfmt to emulate different architecture (e.g. armhf).
#
# If qemu-user and binfmt is needed, then it checks if both are available.
# If not, then it tries to install them using apt-get. Otherwise the script
# should work on any linux system.
#
# It also creates script "enter-chroot" inside the chroot directory, that may
# be used to enter the chroot environment. That script do the following:
#
#   1. saves environment variables specified by $CHROOT_KEEP_VARS and PWD,
#   2. chroots into $CHROOT_DIR,
#   3. starts clean environment using "env -i",
#   4. switches user and simulates full login using "su -l",
#   5. loads saved environment variables and changes directory to saved PWD,
#   6. executes specified command or "sh" if not provided.
#
# Example:
#   sudo alpine-chroot-install -d /alpine -p build-base -p cmake
#	/alpine/enter-chroot $USER ./build
#
# Options and environment variables:
#   -a ARCH                CPU architecture for the chroot. If not set, then it's
#                          the same as the host's architecture. If it's different
#                          from the host's architecture, then it will be emulated
#                          using qemu-user. Options: x86_64, armhf, aarch64.
#
#   -b ALPINE_BRANCH       Alpine branch to install (default is v3.4).
#
#   -d CHROOT_DIR          Absolute path to the directory where Alpine chroot
#                          should be installed (default is /alpine).
#
#   -i BIND_DIR            Absolute path to the directory on the host system that
#                          should be mounted on the same path inside the chroot
#                          (default is PWD).
#
#   -k CHROOT_KEEP_VARS... Names of the environment variables to pass from the
#                          host environment into chroot by the enter-chroot
#                          script. Name may be an extended regular expression.
#                          Default: ARCH CI TRAVIS_.*.
#
#   -m ALPINE_MIRROR...    URI of the Aports mirror to fetch packages from
#                          (default is https://dl-cdn.alpinelinux.org/alpine).
#
#   -p ALPINE_PACKAGES...  Alpine packages to install into the chroot (default is
#                          build-base).
#
#   -r EXTRA_REPOS...      Alpine repositories to be added to
#                          /etc/apk/repositories (main and community from
#                          $ALPINE_MIRROR are always added).
#
#   -t TEMP_DIR            Absolute path to the directory where to store temporary
#                          files (default is /tmp/alpine).
#
#   -h                     Show this help message and exit.
#
#   -v                     Print version and exit.
#
# Each option can be also provided by environment variable. If both option and
# variable is specified, then the option takes precedence.
#
# https://github.com/jirutka/alpine-chroot-install
#---
set -eu

#=======================  C o n s t a n t s  =======================#

# We assume that host is x86_64 just to simplify this script.
APK_TOOLS_URI='http://dl-cdn.alpinelinux.org/alpine/v3.4/main/x86_64/apk-tools-static-2.6.7-r0.apk'
APK_TOOLS_SHA256='342458308b8ebdb6a91d347b6b2cced7349c0cd0560a7fd7cdd71c5e1aa2b9f3'
APK_KEYS_URI='http://alpinelinux.org/keys'
APK_KEYS_SHA256="\
	9c102bcc376af1498d549b77bdbfa815ae86faa1d2d82f040e616b18ef2df2d4  alpine-devel@lists.alpinelinux.org-4a6a0840.rsa.pub
	2adcf7ce224f476330b5360ca5edb92fd0bf91c92d83292ed028d7c4e26333ab  alpine-devel@lists.alpinelinux.org-4d07755e.rsa.pub
	ebf31683b56410ecc4c00acd9f6e2839e237a3b62b5ae7ef686705c7ba0396a9  alpine-devel@lists.alpinelinux.org-5243ef4b.rsa.pub
	1bb2a846c0ea4ca9d0e7862f970863857fc33c32f5506098c636a62a726a847b  alpine-devel@lists.alpinelinux.org-524d27bb.rsa.pub
	12f899e55a7691225603d6fb3324940fc51cd7f133e7ead788663c2b7eecb00c  alpine-devel@lists.alpinelinux.org-5261cecb.rsa.pub
	73867d92083f2f8ab899a26ccda7ef63dfaa0032a938620eda605558958a8041  alpine-devel@lists.alpinelinux.org-58199dcc.rsa.pub"
VERSION='0.1.1'


#=======================  F u n c t i o n s  =======================#

die() {
	printf '\033[1;31mERROR:\033[0m %s\n' "$@" >&2  # bold red
	exit 1
}

einfo() {
	printf '\n\033[1;36m> %s\033[0m\n' "$@" >&2  # bold cyan
}

ewarn() {
	printf '\033[1;33m> %s\033[0m\n' "$@" >&2  # bold yellow
}

normalize_arch() {
	case "$1" in
		x86 | i[3456]86) echo 'i386';;
		armhf | armv[4-9]) echo 'arm';;
		*) echo "$1";;
	esac
}

wgets() {(
	local url="$1"
	local sha256="$2"
	local dest="${3:-.}"

	mkdir -p "$dest" \
		&& cd "$dest" \
		&& rm -f "${url##*/}" \
		&& wget -T 10 "$url" \
		&& echo "$sha256  ${url##*/}" | sha256sum -c
)}

usage() {
	sed -En '/^#---/,/^#---/p' "$0" | sed -E 's/^# ?//; 1d;$d;'
}

gen_chroot_script() {
	cat <<-EOF
		#!/bin/sh
		set -e

		ENV_FILTER_REGEX='($(echo "$CHROOT_KEEP_VARS" | tr -s ' ' '|'))'

	EOF
	cat <<-'EOF'
		user="${1:-root}"; shift
		cmd="${@:-sh}"
		oldpwd="$(pwd)"
		[ "$(id -u)" -eq 0 ] || _sudo='sudo'

		tmpfile="$(mktemp)"
		export | grep -E "^[^=]+ ${ENV_FILTER_REGEX}=" > "$tmpfile" || true

		cd "$(dirname "$0")"
		$_sudo mv "$tmpfile" env.sh
		$_sudo chroot . /usr/bin/env -i su -l "$user" \
		    sh -c ". /env.sh; cd '$oldpwd' 2>/dev/null; $cmd"
	EOF
}


#============================  M a i n  ============================#

: ${ALPINE_BRANCH:="v3.4"}
: ${ALPINE_MIRROR:="https://dl-cdn.alpinelinux.org/alpine"}
: ${ALPINE_PACKAGES:="build-base"}
: ${ARCH:=}
: ${BIND_DIR:="$(pwd)"}
: ${CHROOT_DIR:="/alpine"}
: ${CHROOT_KEEP_VARS:="ARCH CI TRAVIS_.*"}
: ${EXTRA_REPOS:=}
: ${TEMP_DIR:="/tmp/alpine"}

while getopts 'a:b:d:i:k:m:p:r:t:hv' OPTION; do
	case "$OPTION" in
		a) ARCH="$OPTARG";;
		b) ALPINE_BRANCH="$OPTARG";;
		d) CHROOT_DIR="$OPTARG";;
		i) BIND_DIR="$BIND_DIR";;
		k) CHROOT_KEEP_VARS="$CHROOT_KEEP_VARS $OPTARG";;
		m) ALPINE_MIRROR="$OPTARG";;
		p) ALPINE_PACKAGES="$ALPINE_PACKAGES $OPTARG";;
		r) EXTRA_REPOS="$EXTRA_REPOS $OPTARG";;
		t) TEMP_DIR="$OPTARG";;
		h) usage; exit 0;;
		v) echo "alpine-chroot-install $VERSION"; exit 0;;
	esac
done

if [ "$(id -u)" -ne 0 ]; then
	die 'This script must be run as root!'
fi


einfo 'Downloading apk-tools-static'

wgets "$APK_TOOLS_URI" "$APK_TOOLS_SHA256" "$TEMP_DIR"
tar -C "$TEMP_DIR" -xzf "$TEMP_DIR/${APK_TOOLS_URI##*/}"


einfo 'Downloading APK keys'

echo "$APK_KEYS_SHA256" | while read sha256 keyname; do
	wgets "$APK_KEYS_URI/$keyname" $sha256 "$CHROOT_DIR"/etc/apk/keys \
		|| die 'Failed to download or verify APK key!'
done


mkdir -p "$CHROOT_DIR"
cd "$CHROOT_DIR"

if [ -n "$ARCH" ] && [ $(normalize_arch $ARCH) != $(normalize_arch $(uname -m)) ]; then
	einfo "Preparing system for user emulation of $ARCH"

	qemu_arch="$(normalize_arch $ARCH)"

	if [ ! -x /usr/bin/qemu-$qemu_arch-static ]; then
		ewarn "/usr/bin/qemu-$qemu_arch-static not found, trying to install it..."

		apt-get install -y qemu-user-static \
			|| die 'Failed to install qemu-user-static using apt-get!'
	fi

	if [ ! -e /proc/sys/fs/binfmt_misc/qemu-$qemu_arch ]; then
		ewarn "binfmt support for qemu-$qemu_arch is not available, trying to install/enable it..."

		apt-get install -y binfmt-support \
			|| die 'Failed to install binfmt-support using apt-get!'
		update-binfmts --enable \
			|| die 'Failed to enable binfmt!'
	fi

	mkdir -p usr/bin
	cp -v /usr/bin/qemu-$qemu_arch-static usr/bin/
fi


einfo 'Installing Alpine Linux into chroot'

mkdir -p "$CHROOT_DIR"/etc/apk
cd "$CHROOT_DIR"

printf '%s\n' \
	"$ALPINE_MIRROR/$ALPINE_BRANCH/main" \
	"$ALPINE_MIRROR/$ALPINE_BRANCH/community" \
	$EXTRA_REPOS \
	> etc/apk/repositories

cp /etc/resolv.conf etc/resolv.conf

"$TEMP_DIR"/sbin/apk.static \
	--root . --update-cache --initdb --no-progress \
	${ARCH:+--arch $ARCH} \
	add alpine-base

gen_chroot_script > enter-chroot
chmod +x enter-chroot


einfo 'Binding filesystems into chroot'

mount -v -t proc none proc
mount -v --rbind /sys sys
mount -v --rbind /dev dev

mkdir -p "${CHROOT_DIR}${BIND_DIR}"
mount -v --bind "$BIND_DIR" "${CHROOT_DIR}${BIND_DIR}"


einfo 'Setting up Alpine'

user_uid="$(stat -c %u "$BIND_DIR")"
user_name="$(getent passwd "$user_uid" | cut -d: -f1)"

./enter-chroot root <<-EOF
	set -e
	apk update
	apk add $ALPINE_PACKAGES

	if [ $user_uid -ne 0 ]; then
		adduser -u $user_uid -G wheel -s /bin/sh -D "$user_name" || true
	fi
EOF

cat >&2 <<-EOF
	---
	Alpine installation is complete
	Run $CHROOT_DIR/enter-chroot <USER> [command] to enter the chroot.
EOF
